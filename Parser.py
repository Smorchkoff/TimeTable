from datetime import date

import requests
from bs4 import BeautifulSoup as BS
from groups import parseGroups
import json
import re

rulesDW = {'<div>': '', '</div>': '', '\t': '', '\r': '', '\n': ' '}
rulesObj = {
    '\r': '',
    '\n': '',
    '\t': '',
    '\\[<td><span class="blue lowercase">': '',
    '</span>': '',
    '                                                        ': '',
    '        </td>\\]': '',
    '        </td>': '',
    '</td>\\]': '',
    '<td><span class="blue lowercase">': ''
}
rulesPG = {'\r': '', '\n': '', '\t': '', '0': ''}


def filtering(rules, string):
    for k, v in rules.items():
        string = re.sub(k, v, string)
    return string


def parse(numberOfGroup, day, month, year):
    mes = ''
    with open('groups.txt') as f:
        data = f.read()
    current_day = date.today().day
    print(current_day)
    dictGroups = json.loads(data)
    if dictGroups.get(numberOfGroup) is None:
        mes = '–í–≤–µ–¥–µ–Ω–Ω–∞—è –≤–∞–º–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞, –ª–∏–±–æ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –∫–∞–∫–æ–π - —Ç–æ –±—Ä–µ–¥ :)'
        return mes
    else:
        r = requests.get(
            f'http://timetable.nvsuedu.ru/tm/index.php/timetable/show_timetable/group/{dictGroups.get(numberOfGroup)}//0/?date={day}_{month}_{year}'
        )
        soup = BS(r.content, "html.parser")
        gr_ls = list(soup.find_all('span', class_='target')[0].children)
        num_gr = gr_ls[0]
        name_gr = gr_ls[2]
        mes += 'üîò' + num_gr + f" <b>{name_gr}</b>" + '\n'

        # –û–±—â–∏–π–¶–∏–∫–ª
        try:
            Cicle1 = soup.find('table', class_='table gradient-table').findAll('thead')
            for day in Cicle1:
                DayWeek = day.find('div', class_='')
                test = day.find('td', class_='title inactive-gradient')
                if DayWeek is not None:
                    DayWeek = str(DayWeek)
                    DayWeek = filtering(rulesDW, DayWeek)
                    DayWeek = DayWeek.replace(' ', '', 1)

                    today = '\t' * 30+'<b><u>–°–ï–ì–û–î–ù–Ø</u></b>' if current_day == int(re.search(r'\d+', DayWeek)[0]) else ''

                    mes += f"\n{today}\n" + "‚¨õÔ∏è" * 2 + '<b>' + DayWeek + f"</b>" + "‚¨õÔ∏è" * 2 + '\n\n'
                    if test is not None:
                        mes += 'üéâ\t–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Çüéâ\n'
                    else:
                        tr = day.find_next('tbody')
                        trs = tr.findAll('tr', class_='')
                        for line in trs:
                            obj = line.select('td:has(>span, a.blue)')
                            obj = str(obj)
                            obj = filtering(rulesObj, obj)
                            obj = "".join(obj.rstrip())
                            obj = obj.replace(
                                '–≠–ª–µ–∫—Ç–∏–≤–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã (–º–æ–¥—É–ª–∏) –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä–µ –∏ —Å–ø–æ—Ä—Ç—É',
                                '–§–∏–∑—Ä–∞')
                            time = line.find('td', class_='time').find('div').text
                            if time is not None:
                                mes += '‚¨úÔ∏è<b><i>' + time[:6] + "- " + time[6:] + "</i></b>\t"
                            podgruppa = line.find('td', class_='center', attrs={"width": "1"})
                            if podgruppa is not None:
                                podgruppa = podgruppa.text
                                if podgruppa == '\n':
                                    podgruppa = str(podgruppa)
                                    podgruppa = podgruppa.replace('\n', '–û–±—â–∞—è')
                                podgruppa = filtering(rulesPG, podgruppa)
                                mes += '<i>' + podgruppa + "</i>\t"
                            else:
                                podgruppa = '<i>–û–±—â–∞—è</i>'
                                mes += podgruppa + '\t'
                            mes += '<u>' + obj + '</u>\t'
                            cabs = line.findAll('td', class_='blue center')
                            for cab in cabs:
                                cabinet = cab.find('a').text
                                if cabinet == '–≤.–∑.-–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è':
                                    cabinet = str(cabinet)
                                    cabinet = cabinet.replace('–≤.–∑.-–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è', '–î–∏—Å—Ç–∞–Ω—Ç')
                                mes += '<i>' + cabinet + '</i>\n'
        except AttributeError:
            mes = f'\n\n{"‚¨õÔ∏è" * 2}<b>–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫</b>{"‚¨õÔ∏è" * 2}\n\n‚ö†Ô∏è\t–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç‚ö†Ô∏è\n' \
                  f'\n\n{"‚¨õÔ∏è" * 2}<b>–í—Ç–æ—Ä–Ω–∏–∫</b>{"‚¨õÔ∏è" * 2}\n\n‚ö†Ô∏è\t–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç‚ö†Ô∏è\n' \
                  f'\n\n{"‚¨õÔ∏è" * 2}<b>–°—Ä–µ–¥–∞</b>{"‚¨õÔ∏è" * 2}\n\n‚ö†Ô∏è\t–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç‚ö†Ô∏è\n' \
                  f'\n\n{"‚¨õÔ∏è" * 2}<b>–ß–µ—Ç–≤–µ—Ä–≥</b>{"‚¨õÔ∏è" * 2}\n‚ö†Ô∏è\t–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç‚ö†Ô∏è\n' \
                  f'\n\n{"‚¨õÔ∏è" * 2}<b>–ü—è—Ç–Ω–∏—Ü–∞</b>{"‚¨õÔ∏è" * 2}\n‚ö†Ô∏è\t–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç‚ö†Ô∏è\n' \
                  f'\n\n{"‚¨õÔ∏è" * 2}<b>–°—É–±–±–æ—Ç–∞</b>{"‚¨õÔ∏è" * 2}\n\n‚ö†Ô∏è\t–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç‚ö†Ô∏è\n'

        return mes
