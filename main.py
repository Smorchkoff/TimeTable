import os
import time
import dates
from background import keep_alive
from icecream import ic
import telebot
import flask
import requests
from importlib.metadata import version
from groups import parseGroups
from telebot import types
from datetime import datetime
import Parser
from pytz import timezone

# import requests
# from bs4 import BeautifulSoup as BS
format = "%Y-%m-%d %H:%M:%S"
token = "5830418531:AAHNwKbINt9OCYUXaWAE7k7TZSAlpO0y39g"
bot = telebot.TeleBot(token)


####Start#####


MainReply = types.ReplyKeyboardMarkup(resize_keyboard=True)
feedback = types.KeyboardButton('üî∑–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—åüî∑')
nextW = types.KeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è‚û°Ô∏è')
MainReply.add(feedback, nextW)
main_buttons = [feedback, nextW]

AdminReply = types.ReplyKeyboardMarkup(resize_keyboard=True)
get_logs = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –±–æ—Ç–∞')
get_mesgs = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è')
ex = types.KeyboardButton('–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–ø–∞–Ω–µ–ª–∏')
AdminReply.add(get_logs, get_mesgs, ex)
@bot.message_handler(commands=['start'])
def start(message):
    Mark = types.ReplyKeyboardMarkup(resize_keyboard=True)
    feedback = types.KeyboardButton('üî∑–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—åüî∑')
    admin = types.KeyboardButton('–ê–¥–º–∏–Ω–ü–∞–Ω–µ–ª—å')
    Mark.add(feedback)
    start_buttons = [feedback]
    if message.from_user.id == 761686016:
        if len(start_buttons) != 2:
            start_buttons.append(admin)
            Mark.add(admin)

    f_name = message.from_user.first_name if message.from_user.first_name else ''
    l_name = message.from_user.last_name if message.from_user.last_name else ''
    mess = f'–ü—Ä–∏–≤–µ—Ç, <b>{f_name} <u>{l_name}</u></b>\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã:'
    msg = bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=Mark)

    bot.register_next_step_handler(msg, Timetable)




last_time = {}

try:
    @bot.message_handler(content_types=['text'])
    def Timetable(message):
        start = time.time()
        if message.chat.type == 'private':
            now_utc = datetime.now(timezone('Asia/Yekaterinburg'))
            with open('userMessages.txt', "a+", encoding="utf-8") as a_log:
                a_log.write(
                    f'{now_utc.strftime(format)}--{message.from_user.first_name} {message.from_user.last_name}--{message.text}\n'
                )
            if message.text.isdigit():
                flag = True
                global num, countpress
                countpress = 1
                num = message.text
                # markup_inline = types.InlineKeyboardMarkup()
                # an_yes = types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã', callback_data='Acces')
                # markup_inline.add(an_yes)

                if message.from_user.id == 761686016:
                    admin = types.KeyboardButton('–ê–¥–º–∏–Ω–ü–∞–Ω–µ–ª—å')
                    if len(main_buttons) != 3:
                        main_buttons.append(admin)
                        MainReply.add(admin)
                if message.chat.id not in last_time:
                    last_time[message.chat.id] = time.time()
                else:
                    if (time.time() - last_time[message.chat.id]) * 1000 < 5000:
                        bot.send_message(message.chat.id,
                                         '–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –ø–æ–¥–æ–∂–¥–∏ 5 —Å–µ–∫—É–Ω–¥!')
                        return 0
                mssg = bot.send_message(message.chat.id, '–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ... (<i>~5 —Å–µ–∫—É–Ω–¥</i>)', reply_markup=MainReply, parse_mode='html')
                parseGroups()
                last_time[message.chat.id] = time.time()
                mes = ''
                while flag:
                    bot.send_chat_action(message.chat.id, 'typing')
                    mes = Parser.parse(num, dates.day, dates.month, dates.year)
                    flag = False
                # bot.send_chat_action(message.chat.id, 'typing')
                # time.sleep(1)
                #             bot.edit_message_text(chat_id=message.chat.id,
                #                         message_id=message.message_id + 1,
                #                         text=mes,
                #                         parse_mode='html',
                # disable_web_page_preview=True)
                time.sleep(1)
                bot.delete_message(message.chat.id, mssg.message_id)
                bot.send_message(message.chat.id,
                                 mes,
                                 parse_mode='html',
                                 disable_web_page_preview=True, reply_markup=MainReply)

            elif message.text == '–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è‚û°Ô∏è':
                if message.chat.id not in last_time:
                    last_time[message.chat.id] = time.time()
                else:
                    interval = (time.time() - last_time[message.chat.id]) * 5000
                    if interval < 500:
                        bot.send_message(message.chat.id,
                                         '–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –ø–æ–¥–æ–∂–¥–∏ 5 —Å–µ–∫—É–Ω–¥!')
                        return 0
                last_time[message.chat.id] = time.time()
                try:
                    mssg = bot.send_message(message.chat.id, '–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ...(<i>~5 —Å–µ–∫—É–Ω–¥</i>)', parse_mode='html')
                    mes = Parser.parse(num, dates.day + 7 * countpress, dates.month, dates.year)
                    bot.delete_message(message.chat.id, mssg.message_id)
                    bot.send_message(message.chat.id, mes, parse_mode='html', disable_web_page_preview=True)
                    countpress += 1
                except NameError as E:
                    print(f"ERROR: {E}")
                    bot.send_message(message.chat.id, '–°–ø–µ—Ä–≤–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã')
                    return 0
            # –í—ã–≤–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            elif message.text == 'üî∑–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—åüî∑':
                mes = ('<b><i>–ï—Å–ª–∏ –∑–∞–º–µ—Ç–∏–ª–∏ –∫–∞–∫–æ–π - —Ç–æ –±–∞–≥ –∏–ª–∏ –±–æ—Ç –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–ª, –ø–∏—à–∏—Ç–µ –Ω–∞ –Ω–∏–∂–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ '
                       '–∫–æ–Ω—Ç–∞–∫—Ç—ã</i></b>\n\t<a href="https://vk.com/extazyice">üîªVK</a>\n <a '
                       'href="https://discordapp.com/users/472111376324886529/">üîªDiscord</a>\n <a '
                       'href="mailto:extazyice2002@gmail.com">üîª–ü–æ—á—Ç–∞</a>')
                bot.send_message(message.chat.id, mes, parse_mode='html', disable_web_page_preview=True)
            elif message.text == '–ê–¥–º–∏–Ω–ü–∞–Ω–µ–ª—å':
                if message.from_user.id == 761686016:
                    msg = bot.send_message(message.chat.id, '–í—ã –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∞!', reply_markup=AdminReply)
                    bot.register_next_step_handler(msg, AdminPanel)
            else:
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã")

    @bot.message_handler(content_types=['text'])
    def AdminPanel(message):

        if message.chat.type == 'private':
            if message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –±–æ—Ç–∞':
                logs = ''
                with open('logs.txt', 'r') as f:
                    for line in (f.readlines()[-20:]):
                        logs += line + '\n'
                msg = bot.send_message(message.chat.id, '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ª–æ–≥–æ–≤:\n' + logs, reply_markup=AdminReply)
                bot.register_next_step_handler(msg, AdminPanel)
            elif message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è':
                msgs = ''
                with open('userMessages.txt', 'r', encoding='utf-8') as f:
                    for line in (f.readlines()[-20:]):
                        msgs += line + '\n'
                msg = bot.send_message(message.chat.id, '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π:\n' + msgs, reply_markup=AdminReply)
                bot.register_next_step_handler(msg, AdminPanel)
            elif message.text == '–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–ø–∞–Ω–µ–ª–∏':
                msg = bot.send_message(message.chat.id, '–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–ø–∞–Ω–µ–ª–∏',reply_markup=MainReply)
                bot.register_next_step_handler(msg, Timetable)
except Exception as e:
    with open('logs.txt', 'a+') as log:
        now_utc = datetime.now(timezone('Asia/Yekaterinburg'))
        log.write(f'{now_utc.strftime(format)} -- {e}')

# RUN
keep_alive()
bot.polling(none_stop=True, timeout=123)
